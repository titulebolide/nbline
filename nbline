#!/usr/bin/env python3

import click
import os
import subprocess
import git
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt

try:
    from conf import *
except ModuleNotFoundError:
    import shutil
    shutil.copyfile('conf-default.py', 'conf.py')
    from conf import *

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def line_count(filename):
    return int(subprocess.check_output(['wc', '-l', filename]).split()[0])

def getext(filename):
    return os.path.splitext(filename)[1][1:].lower()

def nbline(location, quiet, folder_opened_at=[], depth=0):
    echo_pre = ""
    for d in range(depth):
        if d in folder_opened_at:
            echo_pre+=' │'
        else:
            echo_pre+='  '
    res = 0
    elts = os.listdir(location)
    for noelt, elt in enumerate(elts):
        if noelt == len(elts)-1:
            echo_pre_elt = echo_pre + " └─ "
        else:
            echo_pre_elt = echo_pre + " ├─ "
        path = os.path.join(location, elt)
        if os.path.isdir(path):
            if elt not in excluded_folder:
                if not quiet: click.echo(echo_pre_elt+bcolors.BOLD+bcolors.OKBLUE+elt+bcolors.ENDC)
                if noelt != len(elts) - 1:
                    res += nbline(path, quiet, folder_opened_at=folder_opened_at+[depth], depth=depth+1)
                else:
                    res += nbline(path, quiet, folder_opened_at=folder_opened_at, depth=depth+1)

            else:
                if not quiet: click.echo(echo_pre_elt+bcolors.BOLD+bcolors.FAIL+elt+'(excluded)'+bcolors.ENDC)
        elif elt not in excluded_files and getext(elt) in included_extensions:
            res += int(
                subprocess.check_output(
                    ['wc', '-l', path]
                ).split()[0]
            )
            if not quiet: click.echo(echo_pre_elt+bcolors.OKGREEN+elt+bcolors.ENDC)
        else:
            if not quiet: click.echo(echo_pre_elt+bcolors.FAIL+elt+'(excluded)'+bcolors.ENDC)
    return res

def nblinewrapper(quiet, location):
    """
    Counts the number of lines of code at the specified location
    """
    if not quiet: click.echo(bcolors.BOLD+bcolors.OKBLUE+location+bcolors.ENDC)
    click.echo(nbline(location, quiet))

def gitnbline(location):
    repo = git.Repo(location)
    assert not repo.bare
    date = []
    nbl = []
    for commit in repo.iter_commits():
        repo.git.checkout(str(commit))
        n = nbline(location, True)
        if n < 2000:
            date.append(dt.datetime.fromtimestamp(commit.committed_date))
            nbl.append(n)
        click.echo(str(commit) + " " + str(commit.committed_date) + " " + str(n))
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=10))
    plt.plot(date[::-1], nbl[::-1])
    plt.gcf().autofmt_xdate()
    plt.grid()
    plt.xlabel('date')
    plt.ylabel('# line of codes')
    plt.show()


@click.command()
@click.option('--git/--no-git', default=False)
@click.option('--quiet/--no-quiet', default=False)
@click.argument('location', default='.')
def main(git, quiet, location):
    if git:
        gitnbline(location)
    else:
        nblinewrapper(quiet, location)

if __name__ == '__main__':
    main()
