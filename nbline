#!/usr/bin/env python3

import os
import subprocess
import datetime as dt
import argparse


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
class GitRepo:
    def __init__(self, dir):
        self._dir = dir
    
    def checkout(self, commit):
        subprocess.check_output(['git', '-C', self._dir, 'checkout', '--quiet', commit])

    def get_commit_datetime(self, commit):
        return dt.datetime.fromtimestamp(int(subprocess.check_output(
                ['git', '-C', self._dir, 'show', '--pretty=format:%at', '-s', commit]
        ).decode()))
    
    def get_current_commit(self):
        return subprocess.check_output(['git', '-C', self._dir, 'rev-parse', 'HEAD']).decode()[:-1]

    def get_all_commits(self, branch):
        return subprocess.check_output(['git', '-C', self._dir, 'log', '--pretty=format:%H', branch]).decode().split('\n')

    def get_current_branch(self):
        return subprocess.check_output(['git', '-C', self._dir, 'branch', '--show-current']).decode()[:-1]

def line_count(filename):
    return int(subprocess.check_output(['wc', '-l', filename]).split()[0])

def getext(filename):
    return os.path.splitext(filename)[1][1:].lower()

def nbline(conf, location, quiet, folder_opened_at=[], depth=0):
    echo_pre = ""
    for d in range(depth):
        if d in folder_opened_at:
            echo_pre+=' │'
        else:
            echo_pre+='  '
    res = 0
    elts = os.listdir(location)
    for noelt, elt in enumerate(elts):
        if noelt == len(elts)-1:
            echo_pre_elt = echo_pre + " └─ "
        else:
            echo_pre_elt = echo_pre + " ├─ "
        path = os.path.join(location, elt)
        if os.path.isdir(path):
            if elt not in conf['excluded_folder']:
                if not quiet: print(echo_pre_elt+bcolors.BOLD+bcolors.OKBLUE+elt+bcolors.ENDC)
                if noelt != len(elts) - 1:
                    res += nbline(conf, path, quiet, folder_opened_at=folder_opened_at+[depth], depth=depth+1)
                else:
                    res += nbline(conf, path, quiet, folder_opened_at=folder_opened_at, depth=depth+1)

            else:
                if not quiet: print(echo_pre_elt+bcolors.BOLD+bcolors.FAIL+elt+'(excluded)'+bcolors.ENDC)
        elif elt not in conf['excluded_files'] and getext(elt) in conf['included_extensions']:
            res += int(
                subprocess.check_output(
                    ['wc', '-l', path]
                ).split()[0]
            )
            if not quiet: print(echo_pre_elt+bcolors.OKGREEN+elt+bcolors.ENDC)
        else:
            if not quiet: print(echo_pre_elt+bcolors.FAIL+elt+'(excluded)'+bcolors.ENDC)
    return res

def nblinewrapper(conf, quiet, location):
    """
    Counts the number of lines of code at the specified location
    """
    if not quiet: print(bcolors.BOLD+bcolors.OKBLUE+location+bcolors.ENDC)
    print(nbline(conf, location, quiet))

def gitnbline(conf, location):
    
    import matplotlib.pyplot as plt
    import matplotlib.dates as mdates

    repo = GitRepo(location)
    initial_commit = repo.get_current_commit()
    initial_branch = repo.get_current_branch()
    date = []
    nbl = []
    try:
        commits = repo.get_all_commits(initial_branch)
        for commit in commits:
            repo.checkout(commit)
            date.append(repo.get_commit_datetime(commit))
            nbl.append(nbline(conf, location, True))
            print(str(commit) + " " + str(date[-1]) + " " + str(nbl[-1]))
        repo.checkout(initial_branch)

    except Exception as e:
        repo.checkout(initial_branch)
        raise e
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))
    plt.setp(plt.xticks()[1], rotation=15)
    plt.plot(date[::-1], nbl[::-1])
    plt.gcf().autofmt_xdate()
    plt.grid()
    plt.xlabel('date')
    plt.ylabel('# line of codes')
    plt.show()

def load_conf(path):
    conf = {
        "included_extensions" : [],
        "excluded_folder" : [],
        "excluded_files" : [],
    }

    if os.path.isfile(path):
        import json
        with open(path, 'r') as f:
            conf = json.load(f)
    return conf

if __name__ == '__main__':
    default_config_location = os.path.join(os.path.dirname(__file__), "conf.json")
    parser = argparse.ArgumentParser(
        description = "Counts the number of lines in your code"
    )
    parser.add_argument(
        "-q", "--quiet", action = "store_true", 
        help = "prevents printing the code's tree"
    )
    parser.add_argument(
        "-g", "--git", action = "store_true", 
        help = "explores all the commits from the current branch and\
                plots the number of lines of code though time"
    )
    parser.add_argument(
        "-c", "--config", default = default_config_location,
        help = f"configuration file path, defaults : {default_config_location}"
    )
    parser.add_argument(
        "location", help = "location of your code, default : current folder",
        default = "."
    )
    args = parser.parse_args()
    conf = load_conf(args.config)
    if args.git:
        gitnbline(conf, args.location)
    else:
        nblinewrapper(conf, args.quiet, args.location)
